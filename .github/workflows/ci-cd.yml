name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: task_management_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          rm -f jest.config.js
          npm install
          npm ci
        
      - name: Run tests
        run: npm test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_NAME: task_management_test
          NODE_ENV: test

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Build TypeScript
        run: npm run build

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/task-management-api-prod:$IMAGE_TAG .
          docker push $ECR_REGISTRY/task-management-api-prod:$IMAGE_TAG

      - name: Delete Existing Stack
        run: |
          echo "Checking if stack exists..."
          if aws cloudformation describe-stacks --stack-name task-management-api >/dev/null 2>&1; then
            echo "Deleting existing stack..."
            aws cloudformation delete-stack --stack-name task-management-api
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name task-management-api
          else
            echo "No existing stack found."
          fi

      - name: Deploy to AWS CloudFormation
        run: |
          echo "Starting deployment..."
          aws cloudformation deploy \
            --template-file .github/aws/cloudformation.yml \
            --stack-name task-management-api \
            --parameter-overrides \
              Environment=prod \
              DBUsername=${{ secrets.DB_USERNAME }} \
              DBPassword=${{ secrets.DB_PASSWORD }} \
              DBName=${{ secrets.DB_NAME }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

      - name: Check ECS Service Status
        if: success()
        run: |
          echo "Checking ECS service status..."
          CLUSTER_NAME="task-management-prod"
          SERVICE_NAME="task-management-api-prod"
          
          aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query 'services[0].events[0:5]' \
            --output text
            
          # Get logs from the latest task
          TASK_ID=$(aws ecs list-tasks \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --query 'taskArns[0]' \
            --output text)
            
          if [ "$TASK_ID" != "None" ]; then
            echo "Latest task logs:"
            aws logs get-log-events \
              --log-group-name "/ecs/task-management-api-prod" \
              --log-stream-name "api/$(basename $TASK_ID)" \
              --limit 20
          fi

      - name: Wait for stack creation
        run: |
          aws cloudformation wait stack-create-complete --stack-name task-management-api || {
            echo "Stack creation failed. Fetching stack events..."
            aws cloudformation describe-stack-events --stack-name task-management-api
            exit 1
          } 

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install
          npm install --save-dev @types/node @types/express @types/cors @types/jest @types/supertest
          npm install express cors typeorm dotenv
          
      - name: Build
        run: npm run build 