name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: task-api
  ECS_CLUSTER: task-api-stack-cluster
  ECS_SERVICE: task-api-stack-service
  STACK_NAME: task-api-stack

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: task_management
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        npm install -g typescript ts-jest
        
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: task_management

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy CloudFormation stack
      run: |
        # Check if stack exists
        if ! aws cloudformation describe-stacks --stack-name $STACK_NAME 2>/dev/null; then
          # Create new stack
          aws cloudformation create-stack \
            --stack-name $STACK_NAME \
            --template-body "file://$(pwd)/task-management-api/.github/aws/cloudformation.yml" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters \
              ParameterKey=DBPassword,ParameterValue=${{ secrets.DB_PASSWORD }} \
              ParameterKey=Environment,ParameterValue=production
          
          # Wait for stack creation
          aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
        else
          # Update existing stack
          aws cloudformation update-stack \
            --stack-name $STACK_NAME \
            --template-body "file://$GITHUB_WORKSPACE/task-management-api/.github/aws/cloudformation.yml" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters \
              ParameterKey=DBPassword,ParameterValue=${{ secrets.DB_PASSWORD }} \
              ParameterKey=Environment,ParameterValue=production
          
          # Wait for stack update
          aws cloudformation wait stack-update-complete --stack-name $STACK_NAME
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Force new deployment
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --force-new-deployment

    - name: Get API endpoint
      run: |
        ENDPOINT=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
          --output text)
        echo "API is accessible at: $ENDPOINT" 