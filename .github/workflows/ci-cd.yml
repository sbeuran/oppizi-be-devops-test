name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create test database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c 'CREATE DATABASE task_management_test;'
      
    - name: Run tests
      run: npm test
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USERNAME: postgres
        TEST_DB_PASSWORD: postgres
        TEST_DB_NAME: task_management_test
        NODE_ENV: test 

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Check and delete stack if stuck
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name task-management-api --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "STACK_NOT_FOUND")
          
          if [ "$STACK_STATUS" = "CREATE_IN_PROGRESS" ]; then
            echo "Stack is stuck in CREATE_IN_PROGRESS, deleting..."
            aws cloudformation delete-stack --stack-name task-management-api
            
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name task-management-api
            
            # Additional wait to ensure complete cleanup
            sleep 30
          fi

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file .github/aws/cloudformation.yml \
            --stack-name task-management-api \
            --parameter-overrides \
              Environment=prod \
              DBUsername=${{ secrets.DB_USERNAME }} \
              DBPassword=${{ secrets.DB_PASSWORD }} \
              DBName=${{ secrets.DB_NAME }} \
            --capabilities CAPABILITY_IAM

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: task-management-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster task-management \
            --service task-management-api \
            --force-new-deployment 